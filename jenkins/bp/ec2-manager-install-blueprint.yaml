tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint deploy EC2 for cloudify-manager-install
imports:
  - http://cloudify.co/spec/cloudify/7.0.1/types.yaml
  - plugin:cloudify-aws-plugin?version= >=3.0.3
  - plugin:cloudify-utilities-plugin?version= >=1.22.1

inputs:
  aws_region_name:
    display_label: AWS region name
    type: string
    default: "eu-west-1"

  aws_image_id:
    display_label: AWS image id
    type: string
    default: "ami-082ed116ae2c6d2cc"

  aws_subnet_id:
    display_label: AWS subnet id
    type: string
    default: "subnet-05de767ce22d776df"

  aws_vpc_id:
    display_label: AWS vpc id
    type: string
    default: "vpc-058abc57fcc8fb171"

  aws_security_group_id:
    display_label: AWS security group id
    type: string
    default: "sg-0ecb54c91e140324c"

  aws_fleet_role:
    display_label: AWS fleet role
    type: string
    default: "arn:aws:iam::263721492972:role/aws-ec2-spot-fleet-tagging-role"

  agent_user:
    display_label: The agent username
    description: >
      The username of the agent running on the instance created from the image.
    default: "centos"

  ssh_key_name:
    display_label: SSH key name
    type: string
    default: "cfy-manager-install-key"

  agent_key_name:
    display_label: Agent key name
    type: string
    default: manager-install

dsl_definitions:
  client_config: &client_config
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_templates:
  fleet:
    type: cloudify.nodes.aws.ec2.SpotFleetRequest
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          SpotFleetRequestConfig:
            IamFleetRole: { get_input: aws_fleet_role }
            AllocationStrategy: capacityOptimized
            TargetCapacity: 1
            TerminateInstancesWithExpiration: true
            Type: request
            LaunchSpecifications:

              - ImageId: { get_input: aws_image_id }
                InstanceType: m5.xlarge
                UserData: { get_attribute: [cloud_init, cloud_config] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.11"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }

              - ImageId: { get_input: aws_image_id }
                InstanceType: m6i.xlarge
                UserData: { get_attribute: [cloud_init, cloud_config] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.1152"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }

              - ImageId: { get_input: aws_image_id }
                InstanceType: t2.xlarge
                UserData: { get_attribute: [cloud_init, cloud_config] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.12"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }

              - ImageId: { get_input: aws_image_id }
                InstanceType: t3a.xlarge
                UserData: { get_attribute: [cloud_init, cloud_config] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.13"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }

              - ImageId: { get_input: aws_image_id }
                InstanceType: m5a.xlarge
                UserData: { get_attribute: [cloud_init, cloud_config] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.143"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }

              - ImageId: { get_input: aws_image_id }
                InstanceType: m6a.xlarge
                UserData: { get_attribute: [cloud_init, cloud_config] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.1512"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }
            
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloud_init
      - type: cloudify.relationships.depends_on
        target: vpc

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: aws_vpc_id }
      resource_config:
        CidrBlock: 10.20.0.0/24

  cloud_init:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      encode_base64: true
      resource_config:
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: [ALL=(ALL) NOPASSWD:ALL]
            ssh-authorized-keys:
              - { get_attribute: [agent_key, public_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: { get_input: agent_key_name }
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  instance_details:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      client_config: *client_config
      use_external_resource: true
      use_public_ip: true
      resource_id: { get_attribute: [fleet, instance_ids, 0] }
      agent_config:
        install_method: none
        user: { get_input: agent_user }
        key: { get_attribute: [agent_key, private_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: fleet
      - type: cloudify.relationships.depends_on
        target: agent_key

capabilities:
  endpoint:
    description: The external endpoint of the application.
    value: { get_attribute: [instance_details, public_ip_address] }

  user:
    description: user ID.
    value: { get_input: agent_user }

  key_content:
    description: Private agent key
    value: { get_attribute: [agent_key, private_key_export] }
