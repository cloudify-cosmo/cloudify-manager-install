#!/usr/bin/env python
"""
Collect & install the RPMs from other Jenkins jobs
"""
from __future__ import print_function
import os
import sys
import re
import shutil
import threading
import argparse
import traceback

import requests

RPM_URL = 'https://cloudify-release-eu.s3.eu-west-1.amazonaws.com/cloudify' \
          '/{version}/{prerelease}-build/{repo_name}/{branch_name}' \
          '/latest/{rpm_name}'


REPOS_RPMS = {
    'cloudify-manager': [
        'cloudify-rest-service',
        'cloudify-rabbitmq',
        'cloudify-management-worker'
    ],
    'cloudify-premium': ['cloudify-premium', 'patroni'],
    'cloudify-cli': ['cloudify-cli'],
    'cloudify-agent': ['cloudify-agents']
}


def get_cloudify_package_names(branch, package_pattern, redhat_version=8):
    if redhat_version == 8:
        packages_list_file_name = 'manager-packages-rh8.yaml'
    else:
        packages_list_file_name = 'manager-packages.yaml'

    content = requests.get('https://raw.githubusercontent.com'
                           '/cloudify-cosmo/cloudify-premium/'
                           '{0}/packages-urls/{1}'
                           ''.format(branch, packages_list_file_name),
                           auth=(os.environ['GITHUB_USERNAME'],
                                 os.environ['GITHUB_TOKEN'])
                           )
    _yaml = content.content.decode('utf-8').strip().split('\n')
    _result = None
    for _match in _yaml:
        _n = re.search(
            r'{pattern}-(.*?).rpm'.format(pattern=package_pattern),
            _match
        )
        if _n:
            _result = _n.group()
            break
    return _result


def get_cloudify_release_and_version():
    return os.getenv('CLOUDIFY_VERSION'), os.getenv('CLOUDIFY_PACKAGE_RELEASE')


def download_rpm(repo, pattern, rpms_destination):
    version, prerelease = get_cloudify_release_and_version()
    for branch in (os.getenv('BRANCH_NAME'), os.getenv('CORE_BRANCH'),):
        rpm_name = get_cloudify_package_names(branch, pattern)
        rpm_url = RPM_URL.format(
            version=version,
            prerelease=prerelease,
            repo_name=repo,
            branch_name=branch,
            rpm_name=rpm_name
        )
        print('Start downloading `rpm_url {}`'.format(rpm_url))
        try:
            resp = requests.get(rpm_url, stream=True)
        except requests.RequestException as e:
            print('Error downloading {url}: {e}'.format(url=rpm_url, e=e))
        else:
            if resp.status_code == 200:
                _filename = os.path.join(rpms_destination, rpm_name + '.rpm')
                with open(_filename, 'wb') as f:
                    resp.raw.decode_content = True
                    shutil.copyfileobj(resp.raw, f)
                print('...finished downloading {url}'.format(url=rpm_url))
                break
            else:
                print('Error downloading {url}: {e}'.format(
                    url=rpm_url, e=resp.content))
    else:
        print('Unable to'
              ' download rpm '
              'for `repo` {} for all branches`'
              ''.format(repo))
        sys.exit(1)


def fetch_rpms(rpms_destination):
    downloads = []
    for repo, patterns in REPOS_RPMS.items():
        for _pattern in patterns:
            download = threading.Thread(
                target=download_rpm,
                args=(repo, _pattern, rpms_destination)
            )
            download.start()
            downloads.append(download)
    for download in downloads:
        download.join()
        print('Join thread {} finished execution'.format(download))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Download RPMS from other repos'
    )

    parser.add_argument(
        '-d', '--rpms-destination',
        help='The destination folder to store downloaded artifacts',
        required=True
    )

    args = parser.parse_args()
    try:
        fetch_rpms(args.rpms_destination)
    except Exception:
        print('Failure while trying to fetch rpms.....')
        traceback.print_exc()
        sys.exit(1)
    else:
        print('Fetching all rpms successfully')
