# Prometheus self-check
global:
  scrape_interval:     15s
  evaluation_interval: 30s
  # scrape_timeout is set to the global default (10s).

  external_labels:
    monitor: cloudify
{% if 'manager_service' in services_to_install %}
# Rule files specifies a list of globs. Rules and alerts are read from
# all matching files.
rule_files:
  - alerts/postgresql.yml
  - alerts/rabbitmq.yml
  - alerts/manager.yml
{% endif %}
# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  - job_name: 'prometheus'
    scheme: 'https'
    tls_config:
      ca_file: {{ prometheus.ca_cert_path }}
    metrics_path: /monitoring/metrics
    static_configs:
      - targets: ['{{ manager.private_ip }}:53333']

  - job_name: 'node'
    static_configs:
      - targets: ['localhost:{{ prometheus.node_exporter.metrics_port }}']
{% if 'manager_service' in services_to_install %}
  - job_name: 'http_200'
    metrics_path: /probe
    params:
      module: [http_200]  # Look for a HTTP 200 respose
    static_configs:
      - targets:
          - http://localhost:3000/  # Cloudify composer
          - http://{{ manager.private_ip }}/composer  # Cloudify composer (via proxy)
          - http://localhost:8088/  # Cloudify stage
          - http://{{ manager.private_ip }}/  # Cloudify stage (via proxy)
          - {{ manager.external_rest_protocol }}://{{ manager.public_ip }}:{{ manager.external_rest_port }}/ # Cloudify external
          - https://{{ manager.private_ip }}:53333/ # Cloudify internal
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: localhost:{{ prometheus.blackbox_exporter.metrics_port }}  # The blackbox exporter's real hostname:port.
  - job_name: 'http_400'
    metrics_path: /probe
    params:
      module: [http_400]  # Look for a HTTP 400 respose
    static_configs:
      - targets:
          - http://localhost:8100/  # Cloudify rest service
          - http://localhost:53229/  # Cloudify resources service
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: localhost:{{ prometheus.blackbox_exporter.metrics_port }}  # The blackbox exporter's real hostname:port.
{% if rabbitmq.cluster_members|length > 0 and rabbitmq.cluster_members[rabbitmq.cluster_members|first].address != 'ALL_IN_ONE' %}
  - job_name: 'federate_rabbitmq'
    scrape_interval: 15s
    honor_labels: true
    scheme: 'https'
    tls_config:
      ca_file: {{ rabbitmq.ca_path }}
    metrics_path: /metrics/rabbitmq
    params:
      'match[]':
        - '{job="rabbitmq"}'
        # - '{__name__=~"job:.*"}'
    static_configs:
      - targets:
{% for host, rabbitmq in rabbitmq.cluster_members.items() %}
        - {{ rabbitmq.networks.default }}:53333
{% endfor %}
{% endif %}
{% if postgresql_server.cluster.nodes|length > 0 %}
  - job_name: 'federate_postgres'
    scrape_interval: 15s
    honor_labels: true
    scheme: 'https'
    tls_config:
      ca_file: {{ postgresql_server.ca_path }}
    metrics_path: /metrics/postgres
    params:
      'match[]':
        - '{job="postgresql"}'
        # - '{__name__=~"job:.*"}'
    static_configs:
      - targets:
{% for host, postgres in postgresql_server.cluster.nodes.items() %}
        - {{ postgres.ip }}:53333
{% endfor %}
{% endif %}
{% endif %}{% if 'database_service' in services_to_install %}
  - job_name: 'postgresql'
    static_configs:
      - targets: ['localhost:{{ prometheus.postgres_exporter.metrics_port }}']
{% endif %}{% if 'queue_service' in services_to_install %}
  - job_name: 'rabbitmq'
    static_configs:
      - targets: ['localhost:{{ prometheus.rabbitmq_prometheus.metrics_port }}']
{% endif %}
