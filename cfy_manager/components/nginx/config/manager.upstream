# Upstream for Cloudify stage.
upstream cloudify-stage {
  server 127.0.0.1:8088;
}

# Upstream for Cloudify composer.
upstream cloudify-composer {
  server 127.0.0.1:3000;
}

# Upstream for Cloudify's Rest Service.
upstream cloudify-rest {
  server 127.0.0.1:{{ restservice.port }};
}

{% set internal_rest_ports = [manager.internal_rest_port] + manager.additional_internal_rest_listeners %}
{% set external_rest_port = nginx.port or 443 %}
{#
  we only have a separate external ssl listener, when the same addr + port
  is not already an _internal_ ssl listener.
  If the internal and external listeners would be the same, then only the
  internal listener will exist.
#}
{% set has_external_ssl_listener =
  (manager.public_ip != manager.private_ip) or (external_rest_port not in internal_rest_ports)
%}

{%- if manager.external_rest_protocol == 'http' -%}
# REST and UI server.
server {
  # server listening
  listen              *:{{ nginx.port | default('80', true) }};
  {% if ipv6_enabled -%}
  listen              [::]:{{ nginx.port | default('80', true) }};
  {%- endif %}
  server_name         _;

  include "/etc/nginx/conf.d/logs-conf.cloudify";

  # serve the UI
  include "/etc/nginx/conf.d/ui-locations.cloudify";

  # serve the Composer
  include "/etc/nginx/conf.d/composer-location.cloudify";

  # Serves the Rest Service (backed by the cloudify-rest upstream).
  include "/etc/nginx/conf.d/rest-location.cloudify";

  # Serves the File Server and proxy for the Cloudify-API.
  include "/etc/nginx/conf.d/authd-location.cloudify";
}
{%- elif has_external_ssl_listener -%}
# REST and UI external server
server {
  # server listening for external requests
  listen              {{ external_rest_port }} ssl http2;
  {% if ipv6_enabled -%}
  listen              [::]:{{ external_rest_port }} ssl http2;
  {%- endif %}
  server_name         {{ manager.public_ip }};

  ssl_certificate     {{ constants.EXTERNAL_CERT_PATH }};
  ssl_certificate_key {{ constants.EXTERNAL_KEY_PATH }};

  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

  include "/etc/nginx/conf.d/logs-conf.cloudify";

  # serve the UI
  include "/etc/nginx/conf.d/ui-locations.cloudify";

  # serve the Composer
  include "/etc/nginx/conf.d/composer-location.cloudify";

  # Serves the Rest Service (backed by the cloudify-rest upstream).
  include "/etc/nginx/conf.d/rest-location.cloudify";

  # Serves the File Server and proxy for the Cloudify-API.
  include "/etc/nginx/conf.d/authd-location.cloudify";
}

{#
  if port is set by the user, then it is non-standard and not 443, so
  let's skip the standard 80 port as well
#}
{% if nginx.port is none %}
server {
  listen 80;
  {% if ipv6_enabled -%}
  listen              [::]:80;
  {%- endif %}
  server_name _;

  # For REST API requests, return HTTP 400.
  # We don't want to automatically redirect API requests which
  # may contain sensitive info.
  location ~ ^/api/ {
    return 400 '{"message": "SSL must be used for API access on SSL-enabled managers.", "error_code": "SSL_REQUIRED"}';
  }

  # Other than API requests, and unless otherwise noted: redirect
  # to HTTPS using HTTP code 308 to preserve the request's body.
  location / {
    return 308 https://$host$request_uri;
  }
}
{% endif %}
{%- endif -%}

{% for internal_port in internal_rest_ports %}
# REST and UI internal server - always SSL enabled
server {
  # server listening for internal requests
  listen              {{ internal_port }} ssl default_server http2;
  {% if ipv6_enabled -%}
  listen              [::]:{{ internal_port }} ssl default_server http2;
  {%- endif %}

  server_name         _;

  ssl_certificate     {{ constants.INTERNAL_CERT_PATH }};
  ssl_certificate_key {{ constants.INTERNAL_KEY_PATH }};

  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

  include "/etc/nginx/conf.d/logs-conf.cloudify";
{% if 'manager_service' in services_to_install %}
  # Serves the Rest Service (backed by the cloudify-rest upstream).
  include "/etc/nginx/conf.d/rest-location.cloudify";

  # Serves the File Server and proxy for the Cloudify-API.
  include "/etc/nginx/conf.d/authd-location.cloudify";{% endif %}
}
{% endfor %}