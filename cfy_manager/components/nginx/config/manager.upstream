# Upstream for Cloudify stage.
upstream cloudify-stage {
  server 127.0.0.1:8088;
}

# Upstream for Cloudify composer.
upstream cloudify-composer {
  server 127.0.0.1:3000;
}

# Upstream for Cloudify's Rest Service.
upstream cloudify-rest {
  server 127.0.0.1:{{ restservice.port }};
}

{%- if manager.external_rest_protocol == 'http' -%}
# REST and UI server.
server {
  # server listening
  listen              *:{{ nginx.port | default('80', true) }};
  listen              [::]:{{ nginx.port | default('80', true) }};
  server_name         _;

  include "/etc/nginx/conf.d/logs-conf.cloudify";

  # serve the UI
  include "/etc/nginx/conf.d/ui-locations.cloudify";

  # serve the Composer
  include "/etc/nginx/conf.d/composer-location.cloudify";

  # Serves the Rest Service (backed by the cloudify-rest upstream).
  include "/etc/nginx/conf.d/rest-location.cloudify";

  # Serves the File Server (backed by the cloudify-resources upstream).
  include "/etc/nginx/conf.d/fileserver-location.cloudify";
}
{%- else -%}
# REST and UI external server
server {
  # server listening for external requests
  listen              {{ nginx.port | default('443', true) }} ssl;
  listen              [::]:{{ nginx.port | default('443', true) }} ssl;
  server_name         {{ manager.public_ip }};

  ssl_certificate     {{ constants.external_cert_path }};
  ssl_certificate_key {{ constants.external_key_path }};

  include "/etc/nginx/conf.d/logs-conf.cloudify";

  # serve the UI
  include "/etc/nginx/conf.d/ui-locations.cloudify";

  # serve the Composer
  include "/etc/nginx/conf.d/composer-location.cloudify";

  # Serves the Rest Service (backed by the cloudify-rest upstream).
  include "/etc/nginx/conf.d/rest-location.cloudify";

  # Serves the File Server (backed by the cloudify-resources upstream).
  include "/etc/nginx/conf.d/fileserver-location.cloudify";
}

{#
  if port is set by the user, then it is non-standard and not 443, so
  let's skip the standard 80 port as well
#}
{% if nginx.port is none %}
server {
  listen 80;
  listen [::]:80;
  server_name _;

  # For REST API requests, return HTTP 400.
  # We don't want to automatically redirect API requests which
  # may contain sensitive info.
  location ~ ^/api/ {
    return 400 '{"message": "SSL must be used for API access on SSL-enabled managers.", "error_code": "SSL_REQUIRED"}';
  }

  # Other than API requests, and unless otherwise noted: redirect
  # to HTTPS using HTTP code 308 to preserve the request's body.
  location / {
    return 308 https://$host$request_uri;
  }
}
{% endif %}
{%- endif -%}

# REST and UI internal server - always SSL enabled
server {
  # server listening for internal requests
  listen              {{ constants.internal_rest_port }} ssl default_server;
  listen              [::]:{{ constants.internal_rest_port }} ssl default_server;
  server_name         _;

  ssl_certificate     {{ constants.internal_cert_path }};
  ssl_certificate_key {{ constants.internal_key_path }};

  include "/etc/nginx/conf.d/logs-conf.cloudify";
{% if 'manager_service' in services_to_install %}
  # serve the UI
  include "/etc/nginx/conf.d/ui-locations.cloudify";

  # serve the Composer
  include "/etc/nginx/conf.d/composer-location.cloudify";

  # Serves the Rest Service (backed by the cloudify-rest upstream).
  include "/etc/nginx/conf.d/rest-location.cloudify";

  # Serves the File Server (backed by the cloudify-resources upstream).
  include "/etc/nginx/conf.d/fileserver-location.cloudify";{% endif %}
}
