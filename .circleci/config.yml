version: 2.1

commands:
  wait_for_container:
    parameters:
      container_name:
        type: string
        description: envvar containing the cloudify container name to wait for
    steps:
      - run:
          name: Waiting for << parameters.container_name >> to start
          command: |
            docker exec ${<< parameters.container_name >>} cfy_manager wait-for-starter

jobs:
  fetch_rpms:
    docker:
      - image: python:2
    working_directory: ~/cloudify-manager-install
    steps:
      - checkout
      - run: pip install requests
      - run:
          name: Fetch RPMs built on CircleCI
          command: |
            mkdir rpms
            cd rpms
            ../.circleci/fetch_rpms
      - persist_to_workspace:
          root: ~/cloudify-manager-install
          paths:
            - rpms

  py3_compat:
    docker:
      - image: circleci/python:2.7
    steps:
      - checkout
      - run:
          name: install futurize
          command: pip install future --user
      - run:
          name: find python3-incompatible code
          command: |
            FUTURIZE="futurize ."
            while read line; do
              [[ "$line" =~ ^#.* ]] && continue
              FUTURIZE="${FUTURIZE} -f ${line}"
            done<.circleci/py3fixers
            echo "Running: $FUTURIZE"
            $FUTURIZE>futurize_diffs
      - run:
          name: check that there is no python3-incompatible code
          command: |
            if [[ -s futurize_diffs ]]; then
              echo "Python-3-incompatible code found"
              cat futurize_diffs
              exit 1
            fi

  build_rpm:
    working_directory: /tmp/cloudify-manager-install
    docker:
      - image: rpmbuild/centos7
    steps:
      - checkout
      - run:
          name: Set version environment variables
          command: cat packaging/version_info >> $BASH_ENV
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Link items from workspace under rpm sources dir
          command: |
            rm ~/rpm -fr
            ln -s /tmp/workspace/rpms /tmp/cloudify-manager-install/rpms
            ln -s /tmp/cloudify-manager-install ~/rpm
      - run:
          name: set up cloudify-premium deploy key
          command: |
            mkdir -p ~/.ssh
            echo "${CLOUDIFY_PREMIUM_DEPLOY_KEY}" > ~/.ssh/id_rsa
      - run:
          command: |
            pushd /tmp/cloudify-manager-install/rpms
              /tmp/cloudify-manager-install/packaging/fetch_requirements --edition premium -b ${CIRCLE_BRANCH} >~/fetch_requirements.log
              cat ~/fetch_requirements.log
            popd
      - run: sudo yum install rpmdevtools -y
      - run: sudo chmod a+wx /opt
      - run:
          name: Installing build dependencies
          command: sudo yum-builddep -y packaging/install_rpm.spec
      - run:
          name: set premium_edition in the packaged config.yaml
          command: sed -i "s/set_by_installer_builder/premium/" config.yaml
      - run: rpmbuild -D "CLOUDIFY_VERSION ${CLOUDIFY_VERSION}" -D "CLOUDIFY_PACKAGE_RELEASE ${CLOUDIFY_PACKAGE_RELEASE}" -bb packaging/install_rpm.spec
      - persist_to_workspace:
          root: ~/rpm
          paths:
            - x86_64
      - store_artifacts:
          path: ~/rpm/x86_64
          destination: /

  install_manager:
    machine: true
    environment:
      CONTAINER_NAME: cfy_manager
      IMAGE_NAME: cfy_manager_image
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build manager container
          command: |
            set -eux
            ls -la /tmp/workspace
            pushd packaging/docker
              cp /tmp/workspace/x86_64/*.rpm cloudify-manager-install.rpm
              docker build --tag ${IMAGE_NAME} .
            popd
      - run:
          name: Run manager container
          command: |
            set -eux
            docker run --name ${CONTAINER_NAME} -d -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /run/lock ${IMAGE_NAME}
      - wait_for_container:
          container_name: CONTAINER_NAME
      - run:
          name: Check Manager Status
          command: |
            .circleci/cluster/validate_status.sh ${CONTAINER_NAME}
      - run:
          name: Run the sanity check
          command: |
            docker exec ${CONTAINER_NAME} touch /opt/manager/sanity_mode
            docker exec ${CONTAINER_NAME} cfy_manager sanity-check

  install_cluster:
    machine: true
    environment:
      CONTAINER_NAME: cfy_manager
      IMAGE_NAME: cfy_manager_image
      CLUSTER_IMAGE: cfy_manager_image_preinstalled
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build manager container
          command: |
            set -eux
            ls -la /tmp/workspace
            pushd packaging/docker
              cp /tmp/workspace/x86_64/*.rpm cloudify-manager-install.rpm
              docker build --tag ${CLUSTER_IMAGE} .
            popd
      - run:
          name: Prepare name envvars
          command: |
            echo "export MANAGER1_NAME=${CONTAINER_NAME}_1" >> $BASH_ENV
            echo "export MANAGER2_NAME=${CONTAINER_NAME}_2" >> $BASH_ENV
            echo "export DB1_NAME=${CONTAINER_NAME}_db1" >> $BASH_ENV
            echo "export DB2_NAME=${CONTAINER_NAME}_db2" >> $BASH_ENV
            echo "export DB3_NAME=${CONTAINER_NAME}_db3" >> $BASH_ENV
            echo "export QUEUE1_NAME=${CONTAINER_NAME}_queue_1" >> $BASH_ENV
            echo "export QUEUE2_NAME=${CONTAINER_NAME}_queue_2" >> $BASH_ENV
            echo "export MANAGER1_IP=172.22.0.3" >> $BASH_ENV
            echo "export MANAGER2_IP=172.22.0.4" >> $BASH_ENV
            echo "export DB1_IP=172.22.0.5" >> $BASH_ENV
            echo "export DB2_IP=172.22.0.6" >> $BASH_ENV
            echo "export DB3_IP=172.22.0.7" >> $BASH_ENV
            echo "export QUEUE1_IP=172.22.0.8" >> $BASH_ENV
            echo "export QUEUE2_IP=172.22.0.9" >> $BASH_ENV
      - run:
          name: Create a docker network
          command: docker network create --subnet=172.22.0.0/24 net1
      - run:
          name: generate certs
          command: /bin/bash .circleci/cluster/create_certs.sh
      - run:
          name: Install queue1
          command: |
            set -eux
            sed -e "s/CONTAINER_IP/${QUEUE1_IP}/g" \
              -e "s/QUEUE2_IP/${QUEUE2_IP}/" \
              .circleci/cluster/queue1_config.yaml > queue1_config.yaml

            docker run \
              -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /run/lock -d \
              --name ${QUEUE1_NAME} \
              --network net1 --ip ${QUEUE1_IP} \
              -v $(pwd)/queue1_config.yaml:/etc/cloudify/config.yaml \
              -v $(pwd)/queue1_key.pem:/etc/cloudify/queue_key.pem \
              -v $(pwd)/queue1_cert.pem:/etc/cloudify/queue_cert.pem \
              -v $(pwd)/ca.crt:/etc/cloudify/ca.pem \
              ${CLUSTER_IMAGE}
      - wait_for_container:
          container_name: QUEUE1_NAME
      - run:
          name: Install queue2
          command: |
            sed -e "s/CONTAINER_IP/${QUEUE2_IP}/g" \
              -e "s/QUEUE1_IP/${QUEUE1_IP}/" \
              .circleci/cluster/queue2_config.yaml > queue2_config.yaml
            docker run \
              -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /run/lock -d \
              --name ${QUEUE2_NAME} \
              --network net1 --ip ${QUEUE2_IP} \
              -v $(pwd)/queue2_config.yaml:/etc/cloudify/config.yaml \
              -v $(pwd)/queue2_key.pem:/etc/cloudify/queue_key.pem \
              -v $(pwd)/queue2_cert.pem:/etc/cloudify/queue_cert.pem \
              -v $(pwd)/ca.crt:/etc/cloudify/ca.pem \
              ${CLUSTER_IMAGE}
      - wait_for_container:
          container_name: QUEUE2_NAME
      - run:
          name: Install db1
          command: |
            sed -e "s/CONTAINER_IP/${DB1_IP}/g" \
                  -e "s/DB1_IP/${DB1_IP}/g" \
                  -e "s/DB2_IP/${DB2_IP}/g" \
                  -e "s/DB3_IP/${DB3_IP}/g" \
                  .circleci/cluster/db_config.yaml > db1_config.yaml

            docker run \
              -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /run/lock -d \
              --name ${DB1_NAME} \
              --network net1 --ip ${DB1_IP} \
              -v $(pwd)/db1_config.yaml:/etc/cloudify/config.yaml \
              -v $(pwd)/db1_key.pem:/etc/cloudify/key.pem \
              -v $(pwd)/db1_cert.pem:/etc/cloudify/cert.pem \
              -v $(pwd)/ca.crt:/etc/cloudify/ca.pem \
              ${CLUSTER_IMAGE}
      - wait_for_container:
          container_name: DB1_NAME
      - run:
          name: Install db2
          command: |
            sed -e "s/CONTAINER_IP/${DB2_IP}/g" \
                  -e "s/DB1_IP/${DB1_IP}/g" \
                  -e "s/DB2_IP/${DB2_IP}/g" \
                  -e "s/DB3_IP/${DB3_IP}/g" \
                  .circleci/cluster/db_config.yaml > db2_config.yaml

            docker run \
              -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /run/lock -d \
              --name ${DB2_NAME} \
              --network net1 --ip ${DB2_IP} \
              -v $(pwd)/db2_config.yaml:/etc/cloudify/config.yaml \
              -v $(pwd)/db2_key.pem:/etc/cloudify/key.pem \
              -v $(pwd)/db2_cert.pem:/etc/cloudify/cert.pem \
              -v $(pwd)/ca.crt:/etc/cloudify/ca.pem \
              ${CLUSTER_IMAGE}
      - wait_for_container:
          container_name: DB2_NAME
      - run:
          name: Install db3
          command: |
            sed -e "s/CONTAINER_IP/${DB3_IP}/g" \
                  -e "s/DB1_IP/${DB1_IP}/g" \
                  -e "s/DB2_IP/${DB2_IP}/g" \
                  -e "s/DB3_IP/${DB3_IP}/g" \
                  .circleci/cluster/db_config.yaml > db3_config.yaml

            docker run \
              -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /run/lock -d \
              --name ${DB3_NAME} \
              --network net1 --ip ${DB3_IP} \
              -v $(pwd)/db3_config.yaml:/etc/cloudify/config.yaml \
              -v $(pwd)/db3_key.pem:/etc/cloudify/key.pem \
              -v $(pwd)/db3_cert.pem:/etc/cloudify/cert.pem \
              -v $(pwd)/ca.crt:/etc/cloudify/ca.pem \
              ${CLUSTER_IMAGE}
      - wait_for_container:
          container_name: DB3_NAME
      - run:
          name: Prepare node_id envvars for the status reporter
          command: |
            QUEUE1_NODE=$(docker exec ${QUEUE1_NAME} cfy_manager node get-id | grep -oE '[^ ]+$')
            QUEUE2_NODE=$(docker exec ${QUEUE2_NAME} cfy_manager node get-id | grep -oE '[^ ]+$')
            DB1_NODE=$(docker exec ${DB1_NAME} cfy_manager node get-id | grep -oE '[^ ]+$')
            DB2_NODE=$(docker exec ${DB2_NAME} cfy_manager node get-id | grep -oE '[^ ]+$')
            DB3_NODE=$(docker exec ${DB3_NAME} cfy_manager node get-id | grep -oE '[^ ]+$')

            echo "export QUEUE1_NODE=${QUEUE1_NODE}" >> $BASH_ENV
            echo "export QUEUE2_NODE=${QUEUE2_NODE}" >> $BASH_ENV
            echo "export DB1_NODE=${DB1_NODE}" >> $BASH_ENV
            echo "export DB2_NODE=${DB2_NODE}" >> $BASH_ENV
            echo "export DB3_NODE=${DB3_NODE}" >> $BASH_ENV
      - run:
          name: Install manager1
          command: |
            sed -e "s/CONTAINER_IP/${MANAGER1_IP}/g" \
              -e "s/QUEUE1_IP/${QUEUE1_IP}/g" \
              -e "s/QUEUE2_IP/${QUEUE2_IP}/g" \
              -e "s/DB1_IP/${DB1_IP}/g" \
              -e "s/DB2_IP/${DB2_IP}/g" \
              -e "s/DB3_IP/${DB3_IP}/g" \
              -e "s/QUEUE1_NODE/${QUEUE1_NODE}/g" \
              -e "s/QUEUE2_NODE/${QUEUE2_NODE}/g" \
              -e "s/DB1_NODE/${DB1_NODE}/g" \
              -e "s/DB2_NODE/${DB2_NODE}/g" \
              -e "s/DB3_NODE/${DB3_NODE}/g" \
              .circleci/cluster/manager1_config.yaml > manager1_config.yaml

            docker run \
              -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /run/lock -d \
              --name ${MANAGER1_NAME} \
              --network net1 --ip ${MANAGER1_IP} \
              -v $(pwd)/manager1_config.yaml:/etc/cloudify/config.yaml \
              -v $(pwd)/manager_1_key.pem:/etc/cloudify/key.pem \
              -v $(pwd)/manager_1_cert.pem:/etc/cloudify/cert.pem \
              -v $(pwd)/ca.crt:/etc/cloudify/ca.pem \
              -v $(pwd)/external_cert_1.pem:/etc/cloudify/external_cert.pem \
              -v $(pwd)/external_key_1.pem:/etc/cloudify/external_key.pem \
              -v $(pwd)/db_client_1_key.pem:/etc/cloudify/postgres_client_key.pem \
              -v $(pwd)/db_client_1_cert.pem:/etc/cloudify/postgres_client_cert.pem \
              ${CLUSTER_IMAGE}
      - wait_for_container:
          container_name: MANAGER1_NAME
      - run:
          name: Install manager2
          command: |
            sed -e "s/CONTAINER_IP/${MANAGER2_IP}/g" \
              -e "s/DB1_IP/${DB1_IP}/g" \
              -e "s/DB2_IP/${DB2_IP}/g" \
              -e "s/DB3_IP/${DB3_IP}/g" \
              -e "s/DB1_NODE/${DB1_NODE}/g" \
              -e "s/DB2_NODE/${DB2_NODE}/g" \
              -e "s/DB3_NODE/${DB3_NODE}/g" \
              .circleci/cluster/manager2_config.yaml > manager2_config.yaml

            openssl rsa -aes256 -passout pass:secret_ca_password -in ca.key -out ca.encrypted.key

            docker run \
              -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /run/lock -d \
              --name ${MANAGER2_NAME} \
              --network net1 --ip ${MANAGER2_IP} \
              -v $(pwd)/manager2_config.yaml:/etc/cloudify/config.yaml \
              -v $(pwd)/ca.crt:/etc/cloudify/ca.pem \
              -v $(pwd)/ca.encrypted.key:/etc/cloudify/ca_key.pem \
              -v $(pwd)/external_cert_2.pem:/etc/cloudify/external_cert.pem \
              -v $(pwd)/external_key_2.pem:/etc/cloudify/external_key.pem \
              -v $(pwd)/db_client_2_key.pem:/etc/cloudify/postgres_client_key.pem \
              -v $(pwd)/db_client_2_cert.pem:/etc/cloudify/postgres_client_cert.pem \
              ${CLUSTER_IMAGE}
      - wait_for_container:
          container_name: MANAGER2_NAME
      - run:
          name: Configuring status reporters of brokers
          command: |
            set -eux
            TOKEN=$(docker exec ${MANAGER1_NAME} cfy_manager status-reporter get-tokens --json |  python -c 'import json,sys;obj=json.load(sys.stdin);print obj["broker_status_reporter"]')
            .circleci/cluster/configure_status_reporter.sh "${QUEUE1_NAME} ${QUEUE2_NAME}" "${MANAGER1_IP} ${MANAGER2_IP}" ${TOKEN}
      - run:
          name: Configuring status reporters of db nodes
          command: |
            set -eux
            TOKEN=$(docker exec ${MANAGER1_NAME} cfy_manager status-reporter get-tokens --json |  python -c 'import json,sys;obj=json.load(sys.stdin);print obj["db_status_reporter"]')
            .circleci/cluster/configure_status_reporter.sh "${DB1_NAME} ${DB2_NAME} ${DB3_NAME}" "${MANAGER1_IP} ${MANAGER2_IP}" ${TOKEN}
      - run:
          name: Waiting a little for the status reporters to check in
          command: sleep 6
      - run:
          name: Check Cluster Status
          command: |
            .circleci/cluster/validate_status.sh ${MANAGER1_NAME} ${MANAGER2_NAME}

  flake8:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run: pip install --user flake8
      - run: python -m flake8

workflows:
  version: 2
  build:
    jobs: &build_jobs
      - flake8
      - py3_compat
      - fetch_rpms
      - build_rpm:
          requires:
            - fetch_rpms
      - install_manager:
          requires:
            - build_rpm
      - install_cluster:
          requires:
            - build_rpm

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs: *build_jobs
