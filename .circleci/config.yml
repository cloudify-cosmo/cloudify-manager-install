version: 2.1
jobs:
  fetch_rpms:
    docker:
      - image: python:2
    working_directory: ~/cloudify-manager-install
    steps:
      - checkout
      - run: pip install requests
      - run:
          name: Fetch RPMs built on CircleCI
          command: |
            mkdir rpms
            cd rpms
            ../.circleci/fetch_rpms
      - persist_to_workspace:
          root: ~/cloudify-manager-install
          paths:
            - rpms

  build_executable:
    docker:
      - image: python:2
    working_directory: ~/cloudify-manager-install
    steps:
      - checkout
      - run: pip install pex==1.3.2
      - run: |
          pex . -o pex/cfy_manager -m cfy_manager.main --disable-cache
      - persist_to_workspace:
          root: ~/cloudify-manager-install
          paths:
            - pex

  build_rpm:
    working_directory: /tmp/cloudify-manager-install
    docker:
      - image: rpmbuild/centos7
    steps:
      - checkout
      - run:
          name: Set version environment variables
          command: cat packaging/version_info >> $BASH_ENV
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Link items from workspace under rpm sources dir
          command: |
            rm ~/rpm -fr
            ln -s /tmp/workspace/rpms /tmp/cloudify-manager-install/rpms
            ln -s /tmp/workspace/pex /tmp/cloudify-manager-install/pex
            ln -s /tmp/cloudify-manager-install ~/rpm
      - run:
          name: set up cloudify-premium deploy key
          command: |
            mkdir -p ~/.ssh
            echo "${CLOUDIFY_PREMIUM_DEPLOY_KEY}" > ~/.ssh/id_rsa
      - run:
          command: |
            pushd /tmp/cloudify-manager-install/rpms
              /tmp/cloudify-manager-install/packaging/fetch_requirements --edition premium -b ${CIRCLE_BRANCH} >~/fetch_requirements.log
              cat ~/fetch_requirements.log
            popd
      - run: rpmbuild -D "CLOUDIFY_VERSION ${CLOUDIFY_VERSION}" -D "CLOUDIFY_PACKAGE_RELEASE ${CLOUDIFY_PACKAGE_RELEASE}" -bb packaging/install_rpm.spec
      - persist_to_workspace:
          root: ~/rpm
          paths:
            - x86_64
      - store_artifacts:
          path: ~/rpm/x86_64
          destination: /

  install_manager:
    machine: true
    environment:
      CONTAINER_NAME: cfy_manager
      IMAGE_NAME: cfy_manager_image
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build base container
          command: |
            set -eux
            docker build --tag ${IMAGE_NAME} packaging/docker
      - run:
          name: Run base container
          command: |
            set -eux
            docker run --name ${CONTAINER_NAME} -d -v /tmp/workspace:/tmp/workspace:ro -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /run/lock --security-opt seccomp:unconfined --cap-add SYS_ADMIN ${IMAGE_NAME}
      - run:
          name: Prepare base container
          command: |
            set -eux
            docker exec -d ${CONTAINER_NAME} sh -c "systemctl start sshd"
      - run:
          name: Install the created RPM
          command: |
            set -eux
            docker exec -t ${CONTAINER_NAME} /bin/bash -c "yum install -y /tmp/workspace/x86_64/*.rpm"
      - run:
          name: Install Cloudify Manager
          command: |
            set -eux
            cd packaging/docker
            chmod +x install_manager.sh
            ./install_manager.sh
      - run:
          name: Check Manager Status
          command: |
            .circleci/cluster/validate_status.sh ${CONTAINER_NAME}
  build_image:
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: docker build
          command: |
            pushd packaging/new_docker
              cp /tmp/workspace/x86_64/*.rpm cloudify-manager-install.rpm
              time docker build -t cloudify-manager .
              docker build -t cloudify-manager-queue --build-arg config=config_queue.yaml -f Dockerfile .
              docker build -t cloudify-manager-db -f Dockerfile.db .
            popd
      - run:
          name: prepare envvars
          command: |
            echo "export IP_FORMAT='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'" >> $BASH_ENV
      - run:
          name: run db containers
          command: |
            docker run \
              --name postgres \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_DB=postgres \
              -e POSTGRES_PASSWORD=postgres \
              -d postgres:9.5
            DB_IP=$(docker inspect --format="$IP_FORMAT" postgres)
            echo "export DB_IP=$DB_IP" >> $BASH_ENV
      - run:
          name: run queue containers
          command: |
            set -eux
            pushd .circleci/new_docker
              source functions.sh
              generate_test_cert 172.17.0.3
              mv 172.17.0.3.crt queue1_cert.pem
              mv 172.17.0.3.key queue1_key.pem

              generate_test_cert 172.17.0.4
              mv 172.17.0.4.crt queue2_cert.pem
              mv 172.17.0.4.key queue2_key.pem

              QUEUE1_ID=$(docker run --name cloudify-manager-queue -d \
                --hostname rabbit1 \
                -v $(pwd)/config_queue.yaml:/etc/cloudify/config.yaml \
                -v $(pwd)/ca.crt:/tmp/ca.pem \
                -v $(pwd)/queue1_cert.pem:/tmp/cert.pem \
                -v $(pwd)/queue1_key.pem:/tmp/key.pem \
                --cap-drop SETUID --cap-drop SETGID --cap-drop NET_BIND_SERVICE --security-opt no-new-privileges \
                cloudify-manager-queue)
              wait_for_container cloudify-manager-queue
              docker run --name cloudify-manager-queue-2 -d \
                --hostname rabbit2 \
                --link=${QUEUE1_ID}:rabbit1 \
                -v $(pwd)/config_queue2.yaml:/etc/cloudify/config.yaml \
                -v $(pwd)/queue2_cert.pem:/tmp/cert.pem \
                -v $(pwd)/ca.crt:/tmp/ca.pem \
                -v $(pwd)/queue2_key.pem:/tmp/key.pem \
                --cap-drop SETUID --cap-drop SETGID --cap-drop NET_BIND_SERVICE --security-opt no-new-privileges \
                cloudify-manager-queue
              wait_for_container cloudify-manager-queue-2
            popd
            QUEUE1_IP=$(docker inspect --format="$IP_FORMAT" cloudify-manager-queue)
            QUEUE2_IP=$(docker inspect --format="$IP_FORMAT" cloudify-manager-queue-2)

            QUEUE1_NODE=$(docker exec cloudify-manager-queue cfy_manager node get-id | grep -oE '[^ ]+$')
            QUEUE2_NODE=$(docker exec cloudify-manager-queue-2 cfy_manager node get-id | grep -oE '[^ ]+$')

            echo "export QUEUE1_IP=$QUEUE1_IP" >> $BASH_ENV
            echo "export QUEUE2_IP=$QUEUE2_IP" >> $BASH_ENV
            echo "export QUEUE1_NODE=$QUEUE1_NODE" >> $BASH_ENV
            echo "export QUEUE2_NODE=$QUEUE2_NODE" >> $BASH_ENV

      - run:
          name: run containers
          command: |
            set -eux
            pushd .circleci/new_docker
              source functions.sh

              sed -i -e "s/DB_IP/$DB_IP/" \
                -e "s/QUEUE1_IP/$QUEUE1_IP/" \
                -e "s/QUEUE2_IP/$QUEUE2_IP/" \
                -e "s/QUEUE1_NODE/$QUEUE1_NODE/" \
                -e "s/QUEUE2_NODE/$QUEUE2_NODE/" \
                config.yaml

              docker run --name cloudify-manager -d \
                -v $(pwd)/config.yaml:/tmp/config.yaml \
                -v $(pwd)/ca.crt:/tmp/rabbitmq-cert.pem \
                --cap-drop SETUID --cap-drop SETGID --cap-drop NET_BIND_SERVICE --security-opt no-new-privileges \
                cloudify-manager
              wait_for_container cloudify-manager
              docker exec -it cloudify-manager tail /var/log/cloudify/manager/cfy_manager.log

              docker cp cloudify-manager:/etc/cloudify/ssl/cloudify_internal_ca_cert.pem ca.pem
              docker cp cloudify-manager:/etc/cloudify/ssl/cloudify_internal_ca_key.pem ca_key.pem

              sed -i -e "s/DB_IP/$DB_IP/" \
                -e "s/QUEUE1_IP/$QUEUE1_IP/" \
                -e "s/QUEUE2_IP/$QUEUE2_IP/" \
                -e "s/QUEUE1_NODE/$QUEUE1_NODE/" \
                -e "s/QUEUE2_NODE/$QUEUE2_NODE/" \
                config2.yaml

              docker run --name cloudify-manager-2 -d \
                -v $(pwd)/config2.yaml:/tmp/config.yaml \
                -v $(pwd)/ca.crt:/tmp/rabbitmq-cert.pem \
                -v $(pwd)/ca.pem:/tmp/ca.pem \
                -v $(pwd)/ca_key.pem:/tmp/ca_key.pem \
                --cap-drop SETUID --cap-drop SETGID --cap-drop NET_BIND_SERVICE --security-opt no-new-privileges \
                cloudify-manager

              wait_for_container cloudify-manager-2
              docker exec -it cloudify-manager-2 tail /var/log/cloudify/manager/cfy_manager.log
              docker cp cloudify-manager:/etc/cloudify/ssl/cloudify_internal_ca_cert.pem ca.crt

              TOKEN=$(docker exec cloudify-manager cfy_manager status-reporter get-tokens --json |  python -c 'import json,sys;obj=json.load(sys.stdin);print obj["broker_status_reporter"]')
              MANAGER1_IP=$(docker inspect --format="$IP_FORMAT" cloudify-manager)
              docker cp ca.crt cloudify-manager-queue:/tmp/rest_ca.crt
              docker cp ca.crt cloudify-manager-queue-2:/tmp/rest_ca.crt
              docker exec \
                cloudify-manager-queue \
                cfy_manager \
                  status-reporter \
                  configure \
                    --managers-ip $MANAGER1_IP \
                    --token $TOKEN \
                    --ca-path /tmp/rest_ca.crt
              docker exec \
                cloudify-manager-queue-2 \
                cfy_manager \
                  status-reporter \
                  configure \
                    --managers-ip $MANAGER1_IP \
                    --token $TOKEN \
                    --ca-path /tmp/rest_ca.crt
            popd
      - run:
          name: check cluster status
          command: |
            sleep 6
            .circleci/cluster/validate_status.sh cloudify-manager cloudify-manager-2

  install_cluster:
    machine: true
    environment:
      CONTAINER_NAME: cfy_manager
      IMAGE_NAME: cfy_manager_image
      CLUSTER_IMAGE: cfy_manager_image_preinstalled
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build base container
          command: |
            set -eux
            docker build --tag ${IMAGE_NAME} packaging/docker
            cp -fr /tmp/workspace/x86_64/*.rpm .circleci/cluster
            docker build --tag ${CLUSTER_IMAGE} .circleci/cluster
      - run:
          name: Prepare name envvars
          command: |
            echo "export MANAGER1_NAME=${CONTAINER_NAME}_1" >> $BASH_ENV
            echo "export MANAGER2_NAME=${CONTAINER_NAME}_2" >> $BASH_ENV
            echo "export DB1_NAME=${CONTAINER_NAME}_db1" >> $BASH_ENV
            echo "export DB2_NAME=${CONTAINER_NAME}_db2" >> $BASH_ENV
            echo "export DB3_NAME=${CONTAINER_NAME}_db3" >> $BASH_ENV
            echo "export QUEUE1_NAME=${CONTAINER_NAME}_queue_1" >> $BASH_ENV
            echo "export QUEUE2_NAME=${CONTAINER_NAME}_queue_2" >> $BASH_ENV
      - run:
          name: Run base container
          command: |
            set -eux
            function run_container {
              docker run --name $1 -d -v /tmp/workspace:/tmp/workspace:ro -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /run/lock --security-opt seccomp:unconfined --cap-add SYS_ADMIN ${CLUSTER_IMAGE}
            }
            run_container ${MANAGER1_NAME}
            run_container ${MANAGER2_NAME}
            run_container ${QUEUE1_NAME}
            run_container ${QUEUE2_NAME}
            run_container ${DB1_NAME}
            run_container ${DB2_NAME}
            run_container ${DB3_NAME}
            docker exec -d ${MANAGER1_NAME} sh -c "systemctl start sshd"
            docker exec -d ${MANAGER2_NAME} sh -c "systemctl start sshd"
      - run:
          name: Prepare ip envvars
          command: |
            IP_FORMAT='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'
            QUEUE1_IP=$(docker inspect --format="$IP_FORMAT" ${QUEUE1_NAME})
            QUEUE2_IP=$(docker inspect --format="$IP_FORMAT" ${QUEUE2_NAME})
            DB1_IP=$(docker inspect --format="$IP_FORMAT" ${DB1_NAME})
            DB2_IP=$(docker inspect --format="$IP_FORMAT" ${DB2_NAME})
            DB3_IP=$(docker inspect --format="$IP_FORMAT" ${DB3_NAME})
            MANAGER1_IP=$(docker inspect --format="$IP_FORMAT" ${MANAGER1_NAME})
            MANAGER2_IP=$(docker inspect --format="$IP_FORMAT" ${MANAGER2_NAME})

            echo "export MANAGER1_IP=${MANAGER1_IP}" >> $BASH_ENV
            echo "export MANAGER2_IP=${MANAGER2_IP}" >> $BASH_ENV
            echo "export DB1_IP=${DB1_IP}" >> $BASH_ENV
            echo "export DB2_IP=${DB2_IP}" >> $BASH_ENV
            echo "export DB3_IP=${DB3_IP}" >> $BASH_ENV
            echo "export QUEUE1_IP=${QUEUE1_IP}" >> $BASH_ENV
            echo "export QUEUE2_IP=${QUEUE2_IP}" >> $BASH_ENV
      - run:
          name: generate certs
          command: /bin/bash .circleci/cluster/create_certs.sh
      - run:
          name: Install the queue containers
          command: |
            set -eux
            sed -e "s/CONTAINER_IP/${QUEUE1_IP}/g" \
              -e "s/QUEUE2_IP/${QUEUE2_IP}/" \
              .circleci/cluster/queue1_config.yaml > queue1_config.yaml
            sed -e "s/CONTAINER_IP/${QUEUE2_IP}/g" \
              -e "s/QUEUE1_IP/${QUEUE1_IP}/" \
              .circleci/cluster/queue2_config.yaml > queue2_config.yaml

            docker cp ca.crt ${QUEUE1_NAME}:/etc/cloudify/ca.pem
            docker cp queue1_config.yaml ${QUEUE1_NAME}:/etc/cloudify/config.yaml
            docker cp queue1_key.pem ${QUEUE1_NAME}:/etc/cloudify/queue_key.pem
            docker cp queue1_cert.pem ${QUEUE1_NAME}:/etc/cloudify/queue_cert.pem
            docker exec ${QUEUE1_NAME} cfy_manager install

            docker cp ca.crt ${QUEUE2_NAME}:/etc/cloudify/ca.pem
            docker cp queue2_config.yaml ${QUEUE2_NAME}:/etc/cloudify/config.yaml
            docker cp queue2_key.pem ${QUEUE2_NAME}:/etc/cloudify/queue_key.pem
            docker cp queue2_cert.pem ${QUEUE2_NAME}:/etc/cloudify/queue_cert.pem
            docker exec ${QUEUE2_NAME} cfy_manager install
      - run:
          name: Install the DB containers
          command: /bin/bash .circleci/cluster/install_db.sh
      - run:
          name: Prepare node_id envvars for the status reporter
          command: |
            QUEUE1_NODE=$(docker exec ${QUEUE1_NAME} cfy_manager node get-id | grep -oE '[^ ]+$')
            QUEUE2_NODE=$(docker exec ${QUEUE2_NAME} cfy_manager node get-id | grep -oE '[^ ]+$')
            DB1_NODE=$(docker exec ${DB1_NAME} cfy_manager node get-id | grep -oE '[^ ]+$')
            DB2_NODE=$(docker exec ${DB2_NAME} cfy_manager node get-id | grep -oE '[^ ]+$')
            DB3_NODE=$(docker exec ${DB3_NAME} cfy_manager node get-id | grep -oE '[^ ]+$')

            echo "export QUEUE1_NODE=${QUEUE1_NODE}" >> $BASH_ENV
            echo "export QUEUE2_NODE=${QUEUE2_NODE}" >> $BASH_ENV
            echo "export DB1_NODE=${DB1_NODE}" >> $BASH_ENV
            echo "export DB2_NODE=${DB2_NODE}" >> $BASH_ENV
            echo "export DB3_NODE=${DB3_NODE}" >> $BASH_ENV
      - run:
          name: Install the first manager container
          command: |
            set -eux
            sed -e "s/CONTAINER_IP/${MANAGER1_IP}/g" \
              -e "s/QUEUE1_IP/${QUEUE1_IP}/g" \
              -e "s/QUEUE2_IP/${QUEUE2_IP}/g" \
              -e "s/DB1_IP/${DB1_IP}/g" \
              -e "s/DB2_IP/${DB2_IP}/g" \
              -e "s/DB3_IP/${DB3_IP}/g" \
              -e "s/QUEUE1_NODE/${QUEUE1_NODE}/g" \
              -e "s/QUEUE2_NODE/${QUEUE2_NODE}/g" \
              -e "s/DB1_NODE/${DB1_NODE}/g" \
              -e "s/DB2_NODE/${DB2_NODE}/g" \
              -e "s/DB3_NODE/${DB3_NODE}/g" \
              .circleci/cluster/manager1_config.yaml > manager1_config.yaml
            docker cp manager1_config.yaml ${CONTAINER_NAME}_1:/etc/cloudify/config.yaml

            docker cp ca.crt ${MANAGER1_NAME}:/etc/cloudify/ca.pem
            docker cp manager_1_cert.pem ${MANAGER1_NAME}:/etc/cloudify/cert.pem
            docker cp manager_1_key.pem ${MANAGER1_NAME}:/etc/cloudify/key.pem

            docker cp external_cert_1.pem ${MANAGER1_NAME}:/etc/cloudify/external_cert.pem
            docker cp external_key_1.pem ${MANAGER1_NAME}:/etc/cloudify/external_key.pem
            docker cp db_client_1_key.pem ${MANAGER1_NAME}:/etc/cloudify/postgres_client_key.pem
            docker cp db_client_1_cert.pem ${MANAGER1_NAME}:/etc/cloudify/postgres_client_cert.pem
            docker exec ${MANAGER1_NAME} cfy_manager install --verbose
      - run:
          name: install manager2
          command: |
            set -eux
            sed -e "s/CONTAINER_IP/${MANAGER2_IP}/g" \
              -e "s/DB1_IP/${DB1_IP}/g" \
              -e "s/DB2_IP/${DB2_IP}/g" \
              -e "s/DB3_IP/${DB3_IP}/g" \
              -e "s/DB1_NODE/${DB1_NODE}/g" \
              -e "s/DB2_NODE/${DB2_NODE}/g" \
              -e "s/DB3_NODE/${DB3_NODE}/g" \
              .circleci/cluster/manager2_config.yaml > manager2_config.yaml
            docker cp manager2_config.yaml ${MANAGER2_NAME}:/etc/cloudify/config.yaml
            docker cp ca.crt ${MANAGER2_NAME}:/etc/cloudify/ca.pem
            # encrypting the key to also test key passwords in config.yaml
            openssl rsa -aes256 -passout pass:secret_ca_password -in ca.key  -out ca.encrypted.key
            docker cp ca.encrypted.key ${MANAGER2_NAME}:/etc/cloudify/ca_key.pem

            docker cp external_cert_2.pem ${MANAGER2_NAME}:/etc/cloudify/external_cert.pem
            docker cp external_key_2.pem ${MANAGER2_NAME}:/etc/cloudify/external_key.pem
            docker cp db_client_2_key.pem ${MANAGER2_NAME}:/etc/cloudify/postgres_client_key.pem
            docker cp db_client_2_cert.pem ${MANAGER2_NAME}:/etc/cloudify/postgres_client_cert.pem
            set +x
            docker exec ${MANAGER2_NAME} cfy_manager install --verbose
      - run:
          name: Configuring status reporters of brokers
          command: |
            set -eux
            TOKEN=$(docker exec ${MANAGER1_NAME} cfy_manager status-reporter get-tokens --json |  python -c 'import json,sys;obj=json.load(sys.stdin);print obj["broker_status_reporter"]')
            .circleci/cluster/configure_status_reporter.sh "${QUEUE1_NAME} ${QUEUE2_NAME}" "${MANAGER1_IP} ${MANAGER2_IP}" ${TOKEN}
      - run:
          name: Configuring status reporters of db nodes
          command: |
            set -eux
            TOKEN=$(docker exec ${MANAGER1_NAME} cfy_manager status-reporter get-tokens --json |  python -c 'import json,sys;obj=json.load(sys.stdin);print obj["db_status_reporter"]')
            .circleci/cluster/configure_status_reporter.sh "${DB1_NAME} ${DB2_NAME} ${DB3_NAME}" "${MANAGER1_IP} ${MANAGER2_IP}" ${TOKEN}
      - run:
          name: Waiting a little for the status reporters to check in
          command: sleep 6
      - run:
          name: Check Cluster Status
          command: |
            .circleci/cluster/validate_status.sh ${MANAGER1_NAME} ${MANAGER2_NAME}

  flake8:
    docker:
      - image: python:2
    steps:
      - checkout
      - run: pip install --user flake8
      - run: python -m flake8

workflows:
  version: 2
  build:
    jobs: &build_jobs
      - fetch_rpms
      - build_executable
      - build_rpm:
          requires:
            - fetch_rpms
            - build_executable
      - build_image:
          requires:
            - build_rpm

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs: *build_jobs
