#!/usr/bin/env python
"""
Collect & install the RPMs from other CircleCI jobs
"""
from __future__ import print_function

import itertools
import os
import threading
from fnmatch import fnmatch
from shutil import copyfileobj

import requests


BATCH_SIZE = 100
API_PREFIX = (
    'https://circleci.com/api/v1.1/project/github/'
    '{organization}/{{project}}/'.format(
        organization=os.getenv(
            'CIRCLE_PROJECT_USERNAME', 'cloudify-cosmo')))

URL_TEMPLATE = API_PREFIX + 'tree/{branch}'
ARTIFACTS_TEMPLATE = API_PREFIX + '{build[build_num]}/artifacts'
TRY_BRANCHES = (os.getenv('CIRCLE_BRANCH'), 'master')

LOCAL_PACKAGES_DIR = os.path.expanduser('~/cloudify-manager-install-rpms')

# Keys: other repositories in the same organization
# Values: collection of Workflow jobs from which we need to fetch artifacts.
REPOS = {
    'cloudify-amqp-influxdb': {
        'build-rpm': {'cloudify-*.rpm'},
    },
    'cloudify-manager': {
        'build-rpms': {'cloudify-*.rpm'},
    },
}


def list_builds(repo):
    """List all builds for the given repo (filtered to only the current
    CIRCLE_BRANCH and then master branches)
    """
    for branch in TRY_BRANCHES:
        url = URL_TEMPLATE.format(
                organization=os.getenv(
                    'CIRCLE_PROJECT_USERNAME', 'cloudify-cosmo'),
                project=repo,
                branch=branch,
                )

        print('API path', url)
        for offset in itertools.count(0, BATCH_SIZE):
            resp = requests.get(
                    url, params={'branch': branch, 'offset': offset})
            builds = resp.json()

            if not builds:
                # Empty list means we reached the end of the build list for
                # this branch
                break

            for build in builds:
                yield build

        print('WARNING: matching build not found in branch', branch)


def get_builds(repo, jobs):
    """For the given repo, find a build which successfully built each rpm.

    This will examine the CircleCI build outputs going backwards (fetching
    the builds list in batches of BATCH_SIZE), looking for a successful
    build that had built the rpm.
    """
    for build in list_builds(repo):
        job = build.get('workflows', {'job_name': None})['job_name']
        if job in jobs and build['status'] == 'success':

            yield build, jobs.pop(job)

            if not jobs:
                # All rpms for this repo found
                break

    if jobs:
        raise ValueError("Didn't find builds for jobs", jobs)


def get_artifacts(repo, build, rpms):
    url = ARTIFACTS_TEMPLATE.format(project=repo, build=build)
    resp = requests.get(url)

    for artifact in resp.json():
        filename = os.path.basename(artifact['path'])
        if any(fnmatch(filename, glob) for glob in rpms):
            print('Downloading {} (build {})'.format(
                artifact['path'], build['build_num']))
            resp = requests.get(artifact['url'], stream=True)
            with open(os.path.join(LOCAL_PACKAGES_DIR, filename), 'wb') as f:
                resp.raw.decode_content = True
                copyfileobj(resp.raw, f)


def main():
    os.makedirs(LOCAL_PACKAGES_DIR)
    downloads = []
    for repo, jobs in REPOS.items():
        for build, rpms in get_builds(repo, jobs):
            download = threading.Thread(
                target=get_artifacts,
                args=(repo, build, rpms),
                )
            download.start()
            downloads.append(download)

    for download in downloads:
        download.join()


if __name__ == '__main__':
    main()
